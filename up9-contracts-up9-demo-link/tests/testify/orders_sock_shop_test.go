package up9_autogenerated_tests

import (
    . "authentication"
    . "up9lib"
    assert "github.com/stretchr/testify/assert"
    testing "testing"
)

func TestGetOrdersSearchCustomerid088(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/88/dataset_88.json") {
        address := tt.(map[string]interface{})["address"]
        card := tt.(map[string]interface{})["card"]
        customerId := tt.(map[string]interface{})["customerId"]
        items := tt.(map[string]interface{})["items"]
        x_b3_parentspanid := tt.(map[string]interface{})["x_b3_parentspanid"]
        x_b3_spanid := tt.(map[string]interface{})["x_b3_spanid"]
        x_b3_traceid := tt.(map[string]interface{})["x_b3_traceid"]
        x_span_name := tt.(map[string]interface{})["x_span_name"]

        // GET http://user.sock-shop/customers/{customerId} (endp 19)
        userSockShop := GetHttpClient(t, "http://user.sock-shop", new(Authentication))
        req := new(HttpRequest)
        req.SetHeaders(map[string]interface{}{
            "accept": "application/hal+json",
            "x-b3-parentspanid": x_b3_parentspanid,
            "x-b3-sampled": "1",
            "x-b3-spanid": x_b3_spanid,
            "x-b3-traceid": x_b3_traceid,
            "x-span-name": x_span_name,
        })
        resp := userSockShop.Get(req, "/customers/" + customerId.(string))
        assert.Equal(t, 200, resp.StatusCode())
        assert.NotNil(t, JsonPath(t, "$._links.self.href", resp.String()))
        customer := JsonPath(t, "$._links.self.href", resp.String())

        // POST http://orders.sock-shop/orders (endp 26)
        ordersSockShop := GetHttpClient(t, "http://orders.sock-shop", new(Authentication))
        req2 := new(HttpRequest)
        req2.SetHeaders(map[string]interface{}{
            "accept": "application/json",
            "content-type": "application/json",
        })
        req2.SetJsonBody("data/88/payload_for_endp_26.json", map[string]interface{}{
            "$.address": address,
            "$.card": card,
            "$.customer": customer,
            "$.items": items,
        })
        resp2 := ordersSockShop.Post(req2, "/orders")
        assert.Equal(t, 201, resp2.StatusCode())
        assert.NotNil(t, JsonPath(t, "$.card.ccv", resp2.String()))
        custId := JsonPath(t, "$.customerId", resp2.String())

        // GET http://orders.sock-shop/orders/search/customerId (endp 88)
        req3 := new(HttpRequest)
        req3.SetQueryString(map[string]interface{}{
            "custId": custId,
            "sort": "date",
        })
        resp3 := ordersSockShop.Get(req3, "/orders/search/customerId")
        assert.Equal(t, 200, resp3.StatusCode())
        assert.NotNil(t, JsonPath(t, "$._embedded.customerOrders[*]._links.self.href", resp3.String()))
    }
}

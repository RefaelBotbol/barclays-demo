package up9_autogenerated_tests

import (
    . "authentication"
    . "up9lib"
    assert "github.com/stretchr/testify/assert"
    testing "testing"
)

func TestPostCartsCustomeridItems024(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/24/dataset_24.json") {
        customerId := tt.(map[string]interface{})["customerId"]
        size := tt.(map[string]interface{})["size"]

        // GET http://catalogue.sock-shop/tags (endp 76)
        catalogueSockShop := GetHttpClient(t, "http://catalogue.sock-shop", new(Authentication))
        req := new(HttpRequest)
        resp := catalogueSockShop.Get(req, "/tags")
        assert.Equal(t, 200, resp.StatusCode())
        assert.NotNil(t, JsonPath(t, "$.tags[*]", resp.String()))
        tags := JsonPath(t, "$.tags[*]", resp.String())

        // GET http://catalogue.sock-shop/catalogue (endp 17)
        req2 := new(HttpRequest)
        req2.SetQueryString(map[string]interface{}{
            "page": "1",
            "size": size,
            "sort": "id",
            "tags": tags,
        })
        resp2 := catalogueSockShop.Get(req2, "/catalogue")
        assert.Equal(t, 200, resp2.StatusCode())
        assert.NotNil(t, JsonPath(t, "$[*].tag[*]", resp2.String()))
        itemId := JsonPath(t, "$[*].id", resp2.String())
        id := JsonPath(t, "$[*].id", resp2.String())

        // GET http://catalogue.sock-shop/catalogue/{id} (endp 18)
        req3 := new(HttpRequest)
        resp3 := catalogueSockShop.Get(req3, "/catalogue/" + id)
        assert.Equal(t, 200, resp3.StatusCode())
        unitPrice := JsonPath(t, "$.price", resp3.String())

        // POST http://carts.sock-shop/carts/{customerId}/items (endp 24)
        cartsSockShop := GetHttpClient(t, "http://carts.sock-shop", new(Authentication))
        req4 := new(HttpRequest)
        req4.SetHeaders(map[string]interface{}{
            "accept": "application/json",
            "content-type": "application/json",
        })
        req4.SetJsonBody("data/24/payload_for_endp_24.json", map[string]interface{}{
            "$.itemId": itemId,
            "$.unitPrice": unitPrice,
        })
        resp4 := cartsSockShop.Post(req4, "/carts/" + customerId.(string) + "/items")
        assert.Equal(t, 201, resp4.StatusCode())
        assert.NotNil(t, JsonPath(t, "$.id", resp4.String()))
    }
}

func TestGetCartsCustomeridItems031(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/31/dataset_31.json") {
        customerId := tt.(map[string]interface{})["customerId"]
        x_b3_parentspanid := tt.(map[string]interface{})["x_b3_parentspanid"]
        x_b3_spanid := tt.(map[string]interface{})["x_b3_spanid"]
        x_b3_traceid := tt.(map[string]interface{})["x_b3_traceid"]
        x_span_name := tt.(map[string]interface{})["x_span_name"]

        // GET http://carts.sock-shop/carts/{customerId}/items (endp 31)
        cartsSockShop := GetHttpClient(t, "http://carts.sock-shop", new(Authentication))
        req := new(HttpRequest)
        req.SetHeaders(map[string]interface{}{
            "accept": "application/json",
            "x-b3-parentspanid": x_b3_parentspanid,
            "x-b3-sampled": "1",
            "x-b3-spanid": x_b3_spanid,
            "x-b3-traceid": x_b3_traceid,
            "x-span-name": x_span_name,
        })
        resp := cartsSockShop.Get(req, "/carts/" + customerId.(string) + "/items")
        assert.Equal(t, 200, resp.StatusCode())
        assert.NotNil(t, JsonPath(t, "$[*].id", resp.String()))
    }
}

func TestGetCartsCustomeridMerge025(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/25/dataset_25.json") {
        customerId := tt.(map[string]interface{})["customerId"]
        sessionId := tt.(map[string]interface{})["sessionId"]

        // GET http://carts.sock-shop/carts/{customerId}/merge (endp 25)
        cartsSockShop := GetHttpClient(t, "http://carts.sock-shop", new(Authentication))
        req := new(HttpRequest)
        req.SetQueryString(map[string]interface{}{
            "sessionId": sessionId,
        })
        resp := cartsSockShop.Get(req, "/carts/" + customerId.(string) + "/merge")
        assert.Equal(t, 202, resp.StatusCode())
    }
}

func TestGetCartsCustomeridMerge123(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/123/dataset_123.json") {
        customerId := tt.(map[string]interface{})["customerId"]
        sessionId := tt.(map[string]interface{})["sessionId"]

        // GET http://carts.sock-shop/carts/{customerId}/merge (endp 123)
        cartsSockShop := GetHttpClient(t, "http://carts.sock-shop", new(Authentication))
        req := new(HttpRequest)
        req.SetQueryString(map[string]interface{}{
            "sessionId": sessionId,
        })
        resp := cartsSockShop.Get(req, "/carts/" + customerId.(string) + "/merge")
        assert.Equal(t, 202, resp.StatusCode())
    }
}

func TestGetCartsXgsbdrpaoqfokjglqgckj33lqffzhstlItems251(t *testing.T) {
    // GET http://carts.sock-shop/carts/xGsbdrPaoqfokjGLQgckj33LqFFZhSTL/items (endp 251)
    cartsSockShop := GetHttpClient(t, "http://carts.sock-shop", new(Authentication))
    req := new(HttpRequest)
    resp := cartsSockShop.Get(req, "/carts/xGsbdrPaoqfokjGLQgckj33LqFFZhSTL/items")
    assert.Equal(t, 200, resp.StatusCode())
    assert.NotNil(t, JsonPath(t, "$[*].id", resp.String()))
}

func TestPostCartsXgsbdrpaoqfokjglqgckj33lqffzhstlItems262(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/262/dataset_262.json") {
        size := tt.(map[string]interface{})["size"]

        // GET http://catalogue.sock-shop/tags (endp 76)
        catalogueSockShop := GetHttpClient(t, "http://catalogue.sock-shop", new(Authentication))
        req := new(HttpRequest)
        resp := catalogueSockShop.Get(req, "/tags")
        assert.Equal(t, 200, resp.StatusCode())
        assert.NotNil(t, JsonPath(t, "$.tags[*]", resp.String()))
        tags := JsonPath(t, "$.tags[*]", resp.String())

        // GET http://catalogue.sock-shop/catalogue (endp 17)
        req2 := new(HttpRequest)
        req2.SetQueryString(map[string]interface{}{
            "page": "1",
            "size": size,
            "sort": "id",
            "tags": tags,
        })
        resp2 := catalogueSockShop.Get(req2, "/catalogue")
        assert.Equal(t, 200, resp2.StatusCode())
        assert.NotNil(t, JsonPath(t, "$[*].tag[*]", resp2.String()))
        itemId := JsonPath(t, "$[*].id", resp2.String())
        id := JsonPath(t, "$[*].id", resp2.String())

        // GET http://catalogue.sock-shop/catalogue/{id} (endp 18)
        req3 := new(HttpRequest)
        resp3 := catalogueSockShop.Get(req3, "/catalogue/" + id)
        assert.Equal(t, 200, resp3.StatusCode())
        unitPrice := JsonPath(t, "$.price", resp3.String())

        // POST http://carts.sock-shop/carts/xGsbdrPaoqfokjGLQgckj33LqFFZhSTL/items (endp 262)
        cartsSockShop := GetHttpClient(t, "http://carts.sock-shop", new(Authentication))
        req4 := new(HttpRequest)
        req4.SetHeaders(map[string]interface{}{
            "accept": "application/json",
            "content-type": "application/json",
        })
        req4.SetJsonBody("data/262/payload_for_endp_262.json", map[string]interface{}{
            "$.itemId": itemId,
            "$.unitPrice": unitPrice,
        })
        resp4 := cartsSockShop.Post(req4, "/carts/xGsbdrPaoqfokjGLQgckj33LqFFZhSTL/items")
        assert.Equal(t, 201, resp4.StatusCode())
        assert.NotNil(t, JsonPath(t, "$.id", resp4.String()))
    }
}

package up9_autogenerated_tests

import (
    . "authentication"
    . "up9lib"
    assert "github.com/stretchr/testify/assert"
    testing "testing"
)

func TestPostPaymentauth015(t *testing.T) {
    for _, tt := range LoadDataset(t, "data/15/dataset_15.json") {
        addresseId := tt.(map[string]interface{})["addresseId"]
        cardId := tt.(map[string]interface{})["cardId"]
        city := tt.(map[string]interface{})["city"]
        customerId := tt.(map[string]interface{})["customerId"]
        longNum := tt.(map[string]interface{})["longNum"]
        number := tt.(map[string]interface{})["number"]
        x_b3_parentspanid := tt.(map[string]interface{})["x_b3_parentspanid"]
        x_b3_parentspanid1 := tt.(map[string]interface{})["x_b3_parentspanid1"]
        x_b3_parentspanid2 := tt.(map[string]interface{})["x_b3_parentspanid2"]
        x_b3_parentspanid3 := tt.(map[string]interface{})["x_b3_parentspanid3"]
        x_b3_spanid := tt.(map[string]interface{})["x_b3_spanid"]
        x_b3_spanid1 := tt.(map[string]interface{})["x_b3_spanid1"]
        x_b3_spanid2 := tt.(map[string]interface{})["x_b3_spanid2"]
        x_b3_spanid3 := tt.(map[string]interface{})["x_b3_spanid3"]
        x_b3_traceid := tt.(map[string]interface{})["x_b3_traceid"]
        x_b3_traceid1 := tt.(map[string]interface{})["x_b3_traceid1"]
        x_b3_traceid2 := tt.(map[string]interface{})["x_b3_traceid2"]
        x_b3_traceid3 := tt.(map[string]interface{})["x_b3_traceid3"]
        x_span_name := tt.(map[string]interface{})["x_span_name"]
        x_span_name1 := tt.(map[string]interface{})["x_span_name1"]
        x_span_name2 := tt.(map[string]interface{})["x_span_name2"]

        // GET http://user.sock-shop/customers/{customerId} (endp 19)
        userSockShop := GetHttpClient(t, "http://user.sock-shop", new(Authentication))
        req := new(HttpRequest)
        req.SetHeaders(map[string]interface{}{
            "accept": "application/hal+json",
            "x-b3-parentspanid": x_b3_parentspanid,
            "x-b3-sampled": "1",
            "x-b3-spanid": x_b3_spanid,
            "x-b3-traceid": x_b3_traceid,
            "x-span-name": x_span_name,
        })
        resp := userSockShop.Get(req, "/customers/" + customerId.(string))
        assert.Equal(t, 200, resp.StatusCode())
        assert.NotNil(t, JsonPath(t, "$._links.self.href", resp.String()))
        firstName := JsonPath(t, "$.firstName", resp.String())
        lastName := JsonPath(t, "$.lastName", resp.String())
        username := JsonPath(t, "$.username", resp.String())

        // GET http://user.sock-shop/addresses/{addresseId} (endp 28)
        req2 := new(HttpRequest)
        req2.SetHeaders(map[string]interface{}{
            "accept": "application/hal+json",
            "x-b3-parentspanid": x_b3_parentspanid1,
            "x-b3-sampled": "1",
            "x-b3-spanid": x_b3_spanid1,
            "x-b3-traceid": x_b3_traceid1,
            "x-span-name": x_span_name1,
        })
        resp2 := userSockShop.Get(req2, "/addresses/" + addresseId.(string))
        assert.Equal(t, 200, resp2.StatusCode())
        assert.NotNil(t, JsonPath(t, "$._links.self.href", resp2.String()))
        country := JsonPath(t, "$.country", resp2.String())
        postcode := JsonPath(t, "$.postcode", resp2.String())
        street := JsonPath(t, "$.street", resp2.String())

        // GET http://user.sock-shop/cards/{cardId} (endp 29)
        req3 := new(HttpRequest)
        req3.SetHeaders(map[string]interface{}{
            "accept": "application/hal+json",
            "x-b3-parentspanid": x_b3_parentspanid2,
            "x-b3-sampled": "1",
            "x-b3-spanid": x_b3_spanid2,
            "x-b3-traceid": x_b3_traceid2,
            "x-span-name": x_span_name2,
        })
        resp3 := userSockShop.Get(req3, "/cards/" + cardId.(string))
        assert.Equal(t, 200, resp3.StatusCode())
        assert.NotNil(t, JsonPath(t, "$._links.card.href", resp3.String()))
        ccv := JsonPath(t, "$.ccv", resp3.String())
        expires := JsonPath(t, "$.expires", resp3.String())

        // POST http://payment.sock-shop/paymentAuth (endp 15)
        paymentSockShop := GetHttpClient(t, "http://payment.sock-shop", new(Authentication))
        req4 := new(HttpRequest)
        req4.SetHeaders(map[string]interface{}{
            "accept": "application/json",
            "content-type": "application/json",
            "x-b3-parentspanid": x_b3_parentspanid3,
            "x-b3-sampled": "1",
            "x-b3-spanid": x_b3_spanid3,
            "x-b3-traceid": x_b3_traceid3,
            "x-span-name": "http:/paymentAuth",
        })
        req4.SetJsonBody("data/15/payload_for_endp_15.json", map[string]interface{}{
            "$.address.city": city,
            "$.address.country": country,
            "$.address.number": number,
            "$.address.postcode": postcode,
            "$.address.street": street,
            "$.amount": RandomFloat(4.99, 414.87),
            "$.card.ccv": ccv,
            "$.card.expires": expires,
            "$.card.longNum": longNum,
            "$.customer.firstName": firstName,
            "$.customer.lastName": lastName,
            "$.customer.username": username,
        })
        resp4 := paymentSockShop.Post(req4, "/paymentAuth")
        assert.Equal(t, 200, resp4.StatusCode())
        assert.NotNil(t, JsonPath(t, "$.message", resp4.String()))
    }
}
